{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fnil\fcharset0 Consolas;\f1\ftech\fcharset77 Symbol;}
{\colortbl;\red255\green255\blue255;\red63\green127\blue95;\red127\green0\blue85;\red0\green0\blue192;
\red42\green0\blue255;\red106\green62\blue62;}
{\*\expandedcolortbl;;\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c0\c0\c75294;
\csgenericrgb\c16471\c0\c100000;\csgenericrgb\c41569\c24314\c24314;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
{\info
{\author Faculty}
{\*\company FHDA}}\margl1080\margr1080\margb1080\margt1080\vieww18720\viewh18020\viewkind1
\deftab720
\pard\tx450\tx900\tx1350\tx1800\tx2250\tx2700\tx3240\pardeftab720\ri0\partightenfactor0

\f0\fs20 \cf0 HW1 Java Code File:\
\
Use the following files from the Stack Code Files folder as well as the code below:\
\pard\tx450\tx900\tx1350\tx1800\tx2250\tx2700\tx3240\pardeftab720\li720\fi-360\ri0\partightenfactor0
\ls1\ilvl0
\f1 \cf0 \'a5	
\f0 StackInterface.java\
\ls1\ilvl0
\f1 \'a5	
\f0 ArrayStack.java (but with the methods given in the Answer to Lab Exercise 2.1, AND as specified in Lesson 1, NOT ANY OTHER VERSION)\
\ls1\ilvl0
\f1 \'a5	
\f0 LinkedStack.java (but the FIXED version as shown in the Answer to Lab Exercise 2.2)\
\pard\tx450\tx900\tx1350\tx1800\tx2250\tx2700\tx3240\pardeftab720\ri0\partightenfactor0
\cf0 \
\
// YOU WRITE THE WHOLE InfixExpression.java class as described on the assignment\
\
// Use this method for tokenizing the Infix expression String (DON'T CHANGE IT)\
//     (remember, it's a private instance method in the InfixExpression class):\
	\cf2 // tokens is the name of my instance ArrayList of Strings variable\cf0 \
	\cf3 private\cf0  \cf3 void\cf0  tokenize()\
	\{\
		String [] tokenArray = \cf4 wholeExpr\cf0 .split(\cf5 "[ \\t]+"\cf0 );\
		\cf4 tokens\cf0 .clear(); \cf2 // clear the ArrayList\cf0 \
		\cf3 for\cf0 (\cf3 int\cf0  i=0; i < tokenArray.\cf4 length\cf0 ; ++i)\
		\{\
			\cf4 tokens\cf0 .add(tokenArray[i]); \cf2 // add the next token to the ArrayList\cf0 \
		\}\
	\} \cf2 // end \ul tokenize\cf0 \ulnone \
		\
\
ALGORITHM FOR the execute() method (called from the evaluate() method), heading: \
private void execute(StackInterface<String> opStack,\
			StackInterface<Double> valStack)\
// fill in the method using this algorithm:\
/*\
	op = top of the opStack (call pop())\
	if valStack is empty, return\
\
	rightOperand = top of valStack (call pop())\
\
	if valStack is empty, return\
	leftOperand = top of valStack (call pop())\
\
	switch( op )\
		case "+":  temp = leftOperand + rightOperand\
		case "-":  temp = leftOperand - rightOperand\
		case "*":  temp = leftOperand * rightOperand\
		case "/":  temp = leftOperand / rightOperand\
	end switch\
	push temp onto valStack\
*/\
\
\
ALGORITHM FOR EVALUATION THE INFIX EXPRESSION, USING the ArrayList OF Strings instance variable: (a void method with NO parameters)\
	// this is a variation of the infix eval. algorithm in the textbook\
/*\
declare a stack of String for the operators (use an ArrayStack, I'll call opStack)\
declare a stack of Double for the operands (use a LinkedStack, I'll call valStack)\
for each token in the ArrayList of strings (member variable)\
	if the token is an operator ("+", "-","*","/") \
		if opStack is empty\
			push token onto opStack\
		else if precedence(token) > precedence(top of opStack (call peek(), NOT pop))\
				push token onto opStack\
		      else\
				while opStack isn't empty AND \
				     precedence(token) <= precedence(top of opStack) (call peek(), NOT pop)\
					execute( opStack, valStack )\
				end while\
				push token onto opStack\
			end else\
		 end else		\
	else if token equals "("\
			push token onto opStack\
	else if token equals ")"\
			while top of opStack != "(" (peek, NOT pop)\
				execute(opStack, valStack)\
			end while\
			pop the opStack\
	else\
		convert the token to a Double value (if you don't know how, POST IN THE FORUM)\
		push the Double value onto the valStack\
	end else\
end for loop\
\
while( opStack isn't empty )\
	execute(opStack, valStack)\
end while\
if( valStack's size is 1 )\
	result = top of valStack\
else\
	result = 0\
endelse\
\
End evaluate method\
\
//-----------------------------------------------------------------------------\
// WRITE MAIN as described on the assignment and using the following method & variable:\
\
//USE THE FOLLOWING IN YOUR MAIN FILE for opening the input file:\
	\cf3 public\cf0  \cf3 static\cf0  Scanner \cf4 userScanner\cf0  = \cf3 new\cf0  Scanner(System.\cf4 in\cf0 );\
	\
	// YOU'RE NOT ALLOWED TO CHANGE THIS METHOD, AND YOU MUST USE IT:\
	\cf3 public\cf0  \cf3 static\cf0  Scanner openInputFile()\
	\{\
		String filename;\
        	Scanner scanner=\cf3 null\cf0 ;\
        \
		System.\cf4 out\cf0 .print(\cf5 "Enter the input filename: "\cf0 );\
		filename = \cf4 userScanner\cf0 .nextLine();\
        	File file= \cf3 new\cf0  File(filename);\
\
        	\cf3 try\cf0 \{\
        		scanner = \cf3 new\cf0  Scanner(file);\
        	\}\cf2 // end try\cf0 \
        	\cf3 catch\cf0 (FileNotFoundException fe)\{\
        	   System.\cf4 out\cf0 .println(\cf5 "Can't open input file\\n"\cf0 );\
       	    \cf3 return\cf0  \cf3 null\cf0 ; \cf2 // array of 0 elements\cf0 \
        	\} \cf2 // end catch\cf0 \
        	\cf3 return\cf0  scanner;\
	\} \cf2 // end openInputFile\cf0 \
\
\pard\tx540\tx1080\tx1620\tx2160\tx2700\pardeftab720\ri0\partightenfactor0
\cf0 	// call this method as indicated in HW#1, and don't change the method NOR \
	//    the size of your ArrayStack:\
	\cf3 public\cf0  \cf3 static\cf0  \cf3 void\cf0  testHW1()\
	\{	// testing InfixExpression more:\
		InfixExpression infix1, infix2;\
		infix1 = new InfixExpression(null);\
		infix2 = new InfixExpression("( 234.5 * ( 5.6 + 7.0 ) ) / 100.2" );\
\
		System.\cf4 out\cf0 .println(\cf5 "\\nTesting InfixExpression:"\cf0 );\
		System.out.println("When passing null, the String and double = " \
			+ infix1);\
		System.out.println("When passing a valid String, the String and double = " \
			+ infix2);\
\
		// testing ArrayStack and LinkedStack more:\
		ArrayStack<String> \cf6 arrStack\cf0  = \cf3 new\cf0  ArrayStack<>();\
		LinkedStack<String> \cf6 linkStack\cf0  = \cf3 new\cf0  LinkedStack<>();\
		String [] \cf6 strArray\cf0  = \{\cf5 "First"\cf0 , \cf5 "Second"\cf0 , \cf5 "Third"\cf0 , \cf5 "Fourth"\cf0 , \cf5 "Fifth"\cf0 ,\
				\cf5 "Sixth"\cf0 , \cf5 "Seventh"\cf0 , \cf5 "Eighth"\cf0 , \cf5 "Ninth"\cf0 , \cf5 "Tenth"\cf0 \};\
		\
		\cf2 // Testing ArrayStack\cf0 \
		System.\cf4 out\cf0 .println(\cf5 "\\nTesting the ArrayStack:"\cf0 );\
		\cf3 for\cf0 ( \cf3 int\cf0  \cf6 i\cf0 =0; \cf6 i\cf0  < \cf6 strArray\cf0 .\cf4 length\cf0 ; ++\cf6 i\cf0  )\
		\{\
			\cf3 if\cf0 (!\cf6 arrStack\cf0 .push(\cf6 strArray\cf0 [\cf6 i\cf0 ] + \cf5 " 1"\cf0 ))\
				System.\cf4 out\cf0 .println(\cf5 "Error: couldn't push "\cf0 + \cf6 strArray\cf0 [\cf6 i\cf0 ]+\cf5 " 1"\cf0 );\
		\}\
		\cf3 for\cf0 ( \cf3 int\cf0  \cf6 i\cf0 =0; \cf6 i\cf0  < \cf6 strArray\cf0 .\cf4 length\cf0 ; ++\cf6 i\cf0  )\
		\{\
			\cf3 if\cf0 (!\cf6 arrStack\cf0 .push(\cf6 strArray\cf0 [\cf6 i\cf0 ] + \cf5 " 2"\cf0 ))\
			\{\
				System.\cf4 out\cf0 .println(\cf5 "Out of space, removing "\cf0  +\
							\cf6 arrStack\cf0 .pop());\
				\cf3 if\cf0 (!\cf6 arrStack\cf0 .push(\cf6 strArray\cf0 [\cf6 i\cf0 ] + \cf5 " 2"\cf0 ))\
					System.\cf4 out\cf0 .println(\cf5 "Error pushing!"\cf0 +\cf6 strArray\cf0 [\cf6 i\cf0 ]+\cf5 " 2"\cf0 );\
			\}\
		\}\
		System.\cf4 out\cf0 .println(\cf5 "The size of the ArrayStack is now "\cf0  + \cf6 arrStack\cf0 .size());\
		\cf3 while\cf0 ( !\cf6 arrStack\cf0 .isEmpty() )\
		\{\
			System.\cf4 out\cf0 .println(\cf5 "Popping "\cf0 + \cf6 arrStack\cf0 .pop());\
		\}\
		System.\cf4 out\cf0 .println(\cf5 "The size of the ArrayStack is now "\cf0  + \cf6 arrStack\cf0 .size());\
		\cf3 if\cf0 (!\cf6 arrStack\cf0 .push(\cf6 strArray\cf0 [0] + \cf5 " 3"\cf0 ))\
			System.\cf4 out\cf0 .println(\cf5 "Error: couldn't push "\cf0 + \cf6 strArray\cf0 [0]+\cf5 " 3"\cf0 );\
		\cf3 else\cf0 \
			System.\cf4 out\cf0 .println(\cf5 "After pushing " \cf0 +\cf5  \cf0 arrStack.peek()\cf5  + \
				", the size of the ArrayStack is now "\cf0  + \cf6 arrStack\cf0 .size());\
		\cf2 // testing LinkedStack\cf0 \
		System.\cf4 out\cf0 .println(\cf5 "\\nTesting the LinkedStack:"\cf0 );\
		\cf3 for\cf0 ( \cf3 int\cf0  \cf6 i\cf0 =0; \cf6 i\cf0  < \cf6 strArray\cf0 .\cf4 length\cf0 ; ++\cf6 i\cf0  )\
			\cf6 linkStack\cf0 .push(\cf6 strArray\cf0 [\cf6 i\cf0 ] + \cf5 " 4"\cf0 );\
		System.\cf4 out\cf0 .println(\cf5 "The size of the LinkedStack is "\cf0  + \cf6 linkStack\cf0 .size());\
		\cf3 for\cf0 ( \cf3 int\cf0  \cf6 i\cf0 =0; \cf6 i\cf0  < \cf6 strArray\cf0 .\cf4 length\cf0 /2; ++\cf6 i\cf0  )\
		\{\
			System.\cf4 out\cf0 .println(\cf5 "Popping "\cf0  + \cf6 linkStack\cf0 .pop());\
		\}\
		System.\cf4 out\cf0 .println(\cf5 "The size of the LinkedStack is now "\cf0  + \cf6 linkStack\cf0 .size());\
		\cf3 while\cf0 ( !\cf6 linkStack\cf0 .isEmpty() )\
		\{\
			System.\cf4 out\cf0 .println(\cf5 "Popping "\cf0 + \cf6 linkStack\cf0 .pop());\
		\}\
		System.\cf4 out\cf0 .println(\cf5 "The size of the LinkedStack is now "\cf0  + \cf6 linkStack\cf0 .size());\
		\cf3 if\cf0 (!\cf6 linkStack\cf0 .push(\cf6 strArray\cf0 [0] + \cf5 " 5"\cf0 ))\
			System.\cf4 out\cf0 .println(\cf5 "Error: couldn't push "\cf0 + \cf6 strArray\cf0 [0]+\cf5 " 5"\cf0 );\
		\cf3 else\cf0 \
			System.\cf4 out\cf0 .println(\cf5 "After pushing " \cf0 +\cf5  \cf0 linkStack.peek()\cf5  + \
				", the size of the LinkedStack is now "\cf0  + \cf6 linkStack\cf0 .size());\
\
	\} \cf2 // end stackTester\cf0 \
\
\pard\tx450\tx900\tx1350\tx1800\tx2250\tx2700\tx3240\pardeftab720\ri0\partightenfactor0
\cf0 \
}